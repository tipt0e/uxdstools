--- /vicepa/git/uxdstools.git/src/ldap.c	2010-10-30 13:44:36.553449534 -0700
+++ /vicepa/git/uxdstools.git/src/ldap32.c	2010-10-30 13:45:05.719688473 -0700
@@ -221,7 +221,7 @@ int uxds_acct_parse(uxds_bind_t bind, ux
 	    kuser = get_krbname(auth, FALSE);
 	    if (auth.debug)
 		fprintf(stderr,
-			"user account filter half returned: %s, size %lu len %lu\n",
+			"user account filter half returned: %s, size %i len %i\n",
 			kuser, sizeof(kuser), strlen(kuser));
 	    filter = (center(fbuf, "uid=", kuser));
 	    if (auth.debug)
@@ -428,7 +428,7 @@ int uxds_acct_add(uxds_acct_t pxtype, ux
     if (!snprintf(filter, PG_LEN, POSIXGROUP, mdata.group))
 	return 1;
     if (auth.debug)
-	fprintf(stderr, "filter is %s, len %lu\n", filter, strlen(filter));
+	fprintf(stderr, "filter is %s, len %i\n", filter, strlen(filter));
     if (ldap_search_ext_s(ld, NULL, LDAP_SCOPE_SUBTREE, filter, NULL, 0,
 			  NULL, NULL, NULL, 0, &msg)
 	!= LDAP_SUCCESS) {
@@ -464,7 +464,7 @@ int uxds_acct_add(uxds_acct_t pxtype, ux
     vals = ldap_get_values_len(ld, entry, "description");
     if (vals[0]->bv_val != NULL) {
 	if (auth.debug)
-	    fprintf(stderr, "%s : role, len %lu\n", vals[0]->bv_val,
+	    fprintf(stderr, "%s : role, len %i\n", vals[0]->bv_val,
 		    strlen(vals[0]->bv_val));
 	role = strdup(vals[0]->bv_val);
     }
@@ -474,7 +474,7 @@ int uxds_acct_add(uxds_acct_t pxtype, ux
     char *gidnum = NULL;
     if (vals[0]->bv_val != NULL) {
 	if (auth.debug)
-	    fprintf(stderr, "%s : gidNumber, len %lu\n", vals[0]->bv_val,
+	    fprintf(stderr, "%s : gidNumber, len %i\n", vals[0]->bv_val,
 		    strlen(vals[0]->bv_val));
 	gidnum = strdup(vals[0]->bv_val);
     }
@@ -607,7 +607,7 @@ int uxds_acct_add(uxds_acct_t pxtype, ux
 
 	if (ldap_add_ext_s(ld, user_dn, useradd, NULL, NULL) !=
 	    LDAP_SUCCESS) {
-	    fprintf(stderr, "Attempted DN: %s, len %lu\n", user_dn,
+	    fprintf(stderr, "Attempted DN: %s, len %i\n", user_dn,
 		    strlen(user_dn));
 	    ldap_get_option(ld, LDAP_OPT_RESULT_CODE, &rc);
 	    fprintf(stderr, "%s: %s\n", res, ldap_err2string(rc));
@@ -807,7 +807,7 @@ int uxds_acct_del(uxds_acct_t pxtype, ux
 	break;
     }
     if (auth.debug)
-	fprintf(stderr, "search filter used: %s, len %lu\n", filter,
+	fprintf(stderr, "search filter used: %s, len %i\n", filter,
 		strlen(filter));
     if (ldap_search_ext_s(ld, NULL, LDAP_SCOPE_SUBTREE, filter, NULL, 0,
 			  NULL, NULL, NULL, 0, &msg) != LDAP_SUCCESS) {
@@ -923,7 +923,7 @@ int uxds_acct_mod(uxds_acct_t pxtype, ux
     }
 
     if (auth.debug)
-	fprintf(stderr, "filter is %s, len %lu\n", filter, strlen(filter));
+	fprintf(stderr, "filter is %s, len %i\n", filter, strlen(filter));
     if (ldap_search_ext_s(ld, NULL, LDAP_SCOPE_SUBTREE, filter, NULL, 0,
 			  NULL, NULL, NULL, 0, &msg) != LDAP_SUCCESS) {
 	ldap_get_option(ld, LDAP_OPT_RESULT_CODE, &rc);
@@ -975,7 +975,7 @@ int uxds_acct_mod(uxds_acct_t pxtype, ux
 	vals = ldap_get_values_len(ld, entry, "givenName");
 	if (vals[0]->bv_val != NULL) {
 	    if (auth.debug)
-		fprintf(stderr, "%s : first name, len %lu\n",
+		fprintf(stderr, "%s : first name, len %i\n",
 			vals[0]->bv_val, strlen(vals[0]->bv_val));
 	    mdata.firstname = strdup(vals[0]->bv_val);
 	    ldap_value_free_len(vals);
@@ -985,7 +985,7 @@ int uxds_acct_mod(uxds_acct_t pxtype, ux
 	vals = ldap_get_values_len(ld, entry, "sn");
 	if (vals[0]->bv_val != NULL) {
 	    if (auth.debug)
-		fprintf(stderr, "%s : sn, len %lu\n", vals[0]->bv_val,
+		fprintf(stderr, "%s : sn, len %i\n", vals[0]->bv_val,
 			strlen(vals[0]->bv_val));
 	    mdata.lastname = strdup(vals[0]->bv_val);
 	    ldap_value_free_len(vals);
@@ -994,7 +994,7 @@ int uxds_acct_mod(uxds_acct_t pxtype, ux
     vals = ldap_get_values_len(ld, entry, "gecos");
     if (vals[0]->bv_val != NULL) {
 	if (auth.debug)
-	    fprintf(stderr, "%s : gecos, len %lu\n", vals[0]->bv_val,
+	    fprintf(stderr, "%s : gecos, len %i\n", vals[0]->bv_val,
 		    strlen(vals[0]->bv_val));
 	old_gecos = strdup(vals[0]->bv_val);
     }
@@ -1093,7 +1093,7 @@ int uxds_acct_mod(uxds_acct_t pxtype, ux
 	}
 	if (ldap_modify_ext_s(ld, mod_dn, usermod, NULL, NULL) !=
 	    LDAP_SUCCESS) {
-	    fprintf(stdout, "Attempted DN: %s, len %lu\n", mod_dn,
+	    fprintf(stdout, "Attempted DN: %s, len %i\n", mod_dn,
 		    strlen(mod_dn));
 #ifdef TOOL_LOG
 	    log_event(mod_dn, USER, MOD, "FAILED");
